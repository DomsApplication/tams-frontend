# This workflowwill build and deploy the server-less architecture Lambda , API gateway using aws sam command

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: sam deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      env:
        required: true
        type: environment
        default: 'dev'
      working-directory:
        required: false
        type: string
        default: '.'
      sam-template:
        required: false
        type: string
        default: './aws-sam-template/template.yaml'
      stack-name:
        required: true
        type: string
        default: 'shavika-doms-backend'
      artifacts-bucket:
        required: false
        type: string
        default: 'aws-sam-cli-shavika-doms-backend'

#  pull_request:
#    branches: [ main ]
#   push:
#     branches: [ main ]

permissions:  # added using https://github.com/step-security/secure-workflows
  id-token: write
  contents: read


jobs:

  build-package-deploy:

    # important to specify environment here, defaults to 'dev', so GitHub ations knows where to retrieve the secrets
    environment: ${{ inputs.env || 'dev' }}

    # env variables have to be defined after "environment", so GitHub actions knows where to retrieve the secrets
    env:
      SAM_TEMPLATE: ${{ inputs.sam-template }}
      STACK_NAME: ${{ inputs.stack-name }}
      ROLE_TO_ASSUME: ${{ secrets.ROLE_TO_ASSUME }}
      CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.ROLE_TO_ASSUME }}
      ARTIFACTS_BUCKET: ${{ inputs.artifacts-bucket }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    runs-on: ubuntu-latest
    permissions:
      id-token: write # need this for OIDC
      contents: read

    # dependabot PRs do not need to run this flow as GitHub prohibits dependabot PRs to access workflows
    # dealing with secrets due to security reason.
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true #recommended approach, does not require Python to be installed, and is faster than the default installation method.

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Print debug info
        run: |
          echo environment          : ${{ inputs.env || 'dev' }}
          echo working_directory    : ${{ inputs.working-directory }}
          echo stack-name           : ${{ inputs.stack-name }}
          echo sam-template         : ${{ inputs.sam-template }}
          echo artifacts-bucket     : ${{ inputs.artifacts-bucket }}
          echo PARAMETER_OVERRIDES  : ${{ secrets.PARAMETER_OVERRIDES }} | sed -e 's/\(.\)/\1 /g'

      # SAM template validate
      - name: Template Validate
        run: sam validate --template ${{ inputs.sam-template }}

      # Build inside Docker containers
      - name: Build resources
        run: sam build --template ${{ inputs.sam-template }} --use-container

      # Set project version  
      - name: Set project version as environment variable
        run: |
          cd ${{ inputs.working-directory }}
          echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      # Upload artifact to s3
      - name: Upload artifacts to artifact bucket
        run: |
          if ! aws s3 ls s3://${{ inputs.artifacts-bucket }}-${{ inputs.env || 'dev' }} &> /dev/null ; then
            echo "=======> Bucket not available with the name of :" ${{ inputs.artifacts-bucket }}-${{ inputs.env || 'dev' }}
            aws s3api create-bucket --bucket ${{ inputs.artifacts-bucket }}-${{ inputs.env || 'dev' }}  --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }} --region ${{ secrets.AWS_REGION }}
            echo "=======> Bucket created with the name of :" ${{ inputs.artifacts-bucket }}-${{ inputs.env || 'dev' }}
          fi
          sam package \
            --template ${{ inputs.sam-template }} \
            --s3-bucket ${{ inputs.artifacts-bucket }}-${{ inputs.env || 'dev' }} \
            --region ${{ secrets.AWS_REGION }} \
            --output-template-file packaged.yaml

      # Deployment
      - name: Deploy
        run: |
          sam deploy --stack-name ${{ inputs.stack-name }} \
            --template packaged.yaml \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --region ${{ secrets.AWS_REGION }} \
            --s3-bucket ${{ inputs.artifacts-bucket }}-${{ inputs.env || 'dev' }} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset \
            --role-arn ${CLOUDFORMATION_EXECUTION_ROLE} \
            ${{ secrets.PARAMETER_OVERRIDES || ''}}

      # Delete if failure
      - name: Delete if failure
        if: failure()
        run: |
          sam delete --stack-name ${{ inputs.stack-name }} \
            --region ${{ secrets.AWS_REGION }} \
            --no-prompts