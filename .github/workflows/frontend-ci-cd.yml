name: DO App Platform - Frontend CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment selection"
        required: true
        type: environment
        default: "dev"
      working-directory:
        description: "Working Directory"
        required: true
        type: string
        default: './frontend'

permissions:
  contents: write

jobs:
  CI:
    name: Build React App
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Setup variables
        id: vars
        run: |
          echo "working-directory=${{ inputs.working-directory || './frontend' }}" >> $GITHUB_OUTPUT

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: ${{ steps.vars.outputs.working-directory }}/package-lock.json

      - name: Install Dependencies
        run: |
          cd ${{ steps.vars.outputs.working-directory }}
          npm install

      - name: Build React App
        run: |
          cd ${{ steps.vars.outputs.working-directory }}
          npm run build

      - name: Archive production build
        uses: actions/upload-artifact@v3
        with:
          name: react-build
          path: ${{ steps.vars.outputs.working-directory }}/build

  CD:
    name: Deploy to DO App Platform
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to App Platform
        run: |
          echo "Checking if app 'tams-frontend-application' exists..."
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep tams-frontend-application | awk '{print $1}')

          if [ -z "$APP_ID" ]; then
            echo "App not found. Creating new app..."
            doctl apps create --spec .github/workflows/tams-frontend-app-spec.json --wait
            APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep tams-frontend-application | awk '{print $1}')
            echo "Restarting app... $APP_ID"
            doctl apps restart $APP_ID
          else
            echo "App exists. Updating spec..."
            doctl apps update $APP_ID --spec .github/workflows/tams-frontend-app-spec.json --wait
            echo "Restarting app... $APP_ID"
            doctl apps restart $APP_ID
          fi
